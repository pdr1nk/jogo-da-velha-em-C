#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>



//----------------------- MODO PLAYER VS PLAYER FUNÇÕES---------------------
char jogo[3][3];
int linha, coluna;

//Função para colocar espaços vazios na matriz
void gerarTabuleiro() {
	for(linha = 0; linha < 3; linha++) {
		for(coluna = 0; coluna < 3; coluna++) {
			jogo[linha][coluna]= ' ';
		}
	}
}

//Função para imprimir o tabuleiro na tela
void tabuleiro() {
	printf("\n\n\t 0   1   2\n\n");
	for(linha = 0; linha < 3; linha++) {
		for(coluna = 0; coluna < 3; coluna++) {
			if(coluna == 0){
				printf("\t");
			}
			printf(" %c ", jogo[linha][coluna]);
			if (coluna < 2) {
				printf("|");
			}
			if(coluna == 2) {
				printf("   %d", linha);
			}
		}
		printf("\n");
		if(linha < 2) {
			printf("\t-----------\n");
		}
	}
}

//Função que ira verificar se alguem ganhou na linha 1
int verificarLinha(int linha, char coluna) {
	if(jogo[linha][0] == coluna && jogo[linha][1] == coluna && jogo[linha][2] == coluna) {
		return 1;
	}
	else {
		return 0;
	}
}

/*Função que ira verificar se alguem ganhou em todas as linhas
(se retornar 1 é considerado vitória, se retornar 0 o jogo continua)*/
int verificarLinhas(char coluna) {
	int ganhou = 0;
	for(linha = 0; linha < 3; linha++) {
		ganhou += verificarLinha(linha, coluna);
	}
	return ganhou;
}

// Função que ira verificar se alguem ganhou em apenas uma coluna
int verificarColuna(int coluna, char j) {
	if(jogo[0][coluna] == j && jogo[1][coluna] == j && jogo[2][coluna] == j) {
		return 1;
	}
	else {
		return 0;
	}
}

/*Função que ira verificar se alguem ganhou em todas as colunas 
(se retornar 1 é considerado vitória, se retornar 0 o jogo continua) */
int verificarColunas(char j) {
	int ganhou = 0;
	for(coluna = 0; coluna < 3; coluna++) {
		ganhou += verificarColuna(coluna, j);
	}
	return ganhou;
}

/*Função que verifica se alguem ganhou em uma das diagonais
(se retornar 1 é considerado vitória, se retornar 0 o jogo continua) */
int verificarDiag1(char coluna) {
	if(jogo[0][0] == coluna && jogo[1][1] == coluna && jogo[2][2] == coluna) {
		return 1;
	}
	else {
		return 0;
	}
}

/*Função que verifica se alguem ganhou em uma das diagonais
(se retornar 1 é considerado vitória, se retornar 0 o jogo continua) */
int verificarDiag2(char coluna) {
	if(jogo[0][2] == coluna && jogo[1][1] == coluna && jogo[2][0] == coluna) {
		return 1;
	}
	else {
		return 0;
	}
}

//Função que valida as coordenadas digitadas
int validar(int linha, int coluna) {
	if(linha >= 0 && linha < 3 && coluna >= 0 && coluna < 3 && jogo[linha][coluna] == ' '){
		return 1;
	}
	else {
		return 0;
	}
}

//Função para ler as coordeanadas enviadas e armazenar
void Coordenadas(char j){
	int l, c;
	
	printf("Digite a linha que deseja marcar: ");
	scanf("%d", &l);
	
	printf("Digite a coluna que deseja marcar: ");
	scanf("%d", &c);
	
	while(validar(l,c) == 0) {
		printf("Escolha uma posição válida. Digite a linha que deseja marcar: ");
		scanf("%d", &l);
	
		printf("Digite a coluna que deseja marcar: ");
		scanf("%d", &c);
	}
	jogo[l][c] = j;
}

//Função que calcula a quantidade de casas vazias dentro do tabuleiro
int quantVazias() {
	int quantidade = 0;
	
	for(linha = 0; linha < 3; linha++) {
		for(coluna = 0; coluna < 3; coluna++) {
			if(jogo[linha][coluna] == ' ') {
				quantidade++;
			}
		}
	}
	return quantidade;
}

/*Função que ira fazer a verificação de ganhador e que ira trocar o simbolo marcado no tabuleiro(X,O)
a cada rodada*/
int jogada() {
	int jogador = 1, vitoriaX = 0, vitoria0 = 0;
	char jogador1 = 'X', jogador2 = '0';
	
	do{
		tabuleiro();
		if(jogador == 1){
			Coordenadas(jogador1);
			jogador++;
			vitoriaX += verificarLinhas(jogador1);
			vitoriaX += verificarColunas(jogador1);
			vitoriaX += verificarDiag1(jogador1);
			vitoriaX += verificarDiag2(jogador1);
		}
		else {
			Coordenadas(jogador2);
			jogador = 1;
			vitoria0 += verificarLinhas(jogador2);
			vitoria0 += verificarColunas(jogador2);
			vitoria0 += verificarDiag1(jogador2);
			vitoria0 += verificarDiag2(jogador2);
		}
	}while(vitoriaX == 0 && vitoria0 == 0 && quantVazias() > 0);
	
	tabuleiro();
	
	if(vitoria0 == 1) {
		printf("\nParabéns Jogador 2 você ganhou!\n");
		return 2;
	}
	else if(vitoriaX == 1) {
		printf("\nParabéns Jogador 1 você ganhou!\n");
		return 1;
	}
	else {
		printf("\nQue pena, deu empate!\n");
	}
}

// Criando a função de imprimir o placar com os parâmetros de jogador como ponteiro
void placar(int resultado, int *jogador1, int *jogador2){
	

	if(resultado == 1){
		(*jogador1)++;
	}
	if(resultado == 2){
		(*jogador2)++;	
	}
		

	printf("Placar: \n %d x %d \n", *jogador1, *jogador2);

}
//----------------------------------- FIM DAS FUNÇÕES DO MODO PVP ---------------------------------



int main () {

    setLocale(LC_ALL,"");
    int opcaoMenu; // Vai gerenciar a opção do Menu
    int opcao; // Gerencia se o jogador que está no modo PvP quer continuar jogando
	
    
    /*Parâmetros do modo PvP*/
	int resultado = 0;
	int jogador1 = 0;
	int jogador2 = 0;
	
	do{
        printf("___ MENU ___\n");
        printf("1. Jogar contra outro jogador\n");
        printf("2. Jogar contra a máquina (opção não implementada ainda)\n");
        printf("0. Sair do jogo\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcaoMenu);

        switch (opcaoMenu) {
            case 1:
                // Código para jogar contra outro jogador
                printf("Você escolheu jogar contra outro jogador!\n");
                do{
                    gerarTabuleiro();
		            resultado = jogada();
		
                    placar(resultado, &jogador1, &jogador2);
		
		            printf("\nDigite 1 para jogar novamente e 0 para voltar ao menu: ");
		            scanf("%d", &opcao);
                } while(opcao == 1);
                break;
            case 2:
                // Código para jogar contra a máquina (a ser implementado)
                printf("Desculpe, essa opção ainda não foi implementada.\n");
                break;
            case 0:
                printf("Saindo do jogo...\n");
                return 0; // Termina o programa
            default:
                printf("Opção inválida! Por favor, escolha uma opção válida.\n");
                break;
        }


    } while (opcaoMenu != 0);
	
}
